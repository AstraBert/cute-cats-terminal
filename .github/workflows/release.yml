name: Publish - Changeset

on:
  workflow_run:
    workflows: ["Version Bump - Changeset"]
    types:
      - completed
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    # Only run if the version workflow succeeded AND there were actual version changes
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # Get the latest changes from the version workflow
          ref: ${{ github.event.workflow_run.head_branch }}

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "ts/cute_cats_terminal/.nvmrc"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Add auth token to .npmrc file
        run: |
          cat << EOF >> ".npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check for package changes
        id: check-changes
        run: |
          # Check if there are any packages that need to be published
          if pnpm changeset status --output .changeset/status.json; then
            new_package=$(jq -r '.changesets[0].releases[0].name' < .changeset/status.json)
            new_package1=$(jq -r '.changesets[0].releases[1].name' < .changeset/status.json)
            rm -v .changeset/status.json

            if [[ $new_package == "null" ]]; then
              echo "No packages to publish"
              echo "should_publish=false" >> "$GITHUB_OUTPUT"
            else
              echo "should_publish=true" >> "$GITHUB_OUTPUT"

              if [[ $new_package1 == "null" ]]; then
                echo "new_package=${new_package}" >> "$GITHUB_OUTPUT"
                echo "package_count=1" >> "$GITHUB_OUTPUT"
              else
                echo "new_package=${new_package} and ${new_package1}" >> "$GITHUB_OUTPUT"
                echo "package_count=2" >> "$GITHUB_OUTPUT"
              fi

              # Set individual package flags for conditional logic
              if [[ $new_package == "@llama_cloud_services/py" ]] || [[ $new_package1 == "@llama_cloud_services/py" ]]; then
                echo "has_py_package=true" >> "$GITHUB_OUTPUT"
              else
                echo "has_py_package=false" >> "$GITHUB_OUTPUT"
              fi

              if [[ $new_package == "llama-cloud-services" ]] || [[ $new_package1 == "llama-cloud-services" ]]; then
                echo "has_ts_package=true" >> "$GITHUB_OUTPUT"
              else
                echo "has_ts_package=false" >> "$GITHUB_OUTPUT"
              fi
            fi
          else
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm/PyPI
        if: steps.check-changes.outputs.should_publish == 'true'
        run: |
          ${{
            (steps.check-changes.outputs.has_py_package == 'true' && steps.check-changes.outputs.has_ts_package == 'true' && 'pnpm release') ||
            (steps.check-changes.outputs.has_py_package == 'true' && steps.check-changes.outputs.has_ts_package == 'false' && 'pnpm release-py') ||
            (steps.check-changes.outputs.has_py_package == 'false' && steps.check-changes.outputs.has_ts_package == 'true' && 'pnpm release-ts') ||
            'pnpm release'
          }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
